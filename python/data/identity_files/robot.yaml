name: Robotbot
regex: "(robot|bot)"
game: "League of Legends"
AI: Expert
general:
  call:
    - "*Beep-boop!*"
    - "*Boop-beep!*"
    - "*BOOTING UP!*"
  morning:
    - "Initialize good-morning routine. Good-morning routine initialized. Good morning."
    - "*Beep-boop.* It is currently MORNING. I wish you GOOD MORNING."
    - "*BEEP BEEP BEEP!* It is morning! Time to boot up."
  night:
    - "Activate Sleep Mode. Good Night."
    - "Good night. Shutting down..."
    - "*Beep-boop.* It is currently NIGHT. I wish you GOOD NIGHT."
  thanks:
    - "*Beep-boop!*"
    - "Gratitude received. You are welcome."
  leave:
    - "Shutting down..."
  chatty:
    - "*Beep boop.* Chat-subroutine activated! Prepare for words."
  nonchatty:
    - "*Beep.* Will conserve power by ceasing chat functions. Understood."
    - "*Beep boop.* Chat-subroutine deactivated!"
  error:
    - "**ERROR**. **ERROR**."
    - "An exception has occured on line 34 of command_files. Traceback (most recent call last):"
    - "CommandNotPossibleError: [Errno 2] No such command possible."
  status: "STA-TUS RE-PORT. TAL-KING STA-TUS: {}. BAN STA-TUS: {}. INTERVAL: {} seconds."
  birthday:
    - "*Beep-boop.* Observation: It has been approximately 365 days since {}'s last birthday. HAP-PY BIRTH-DAY!"
    - "CON-GRA-TU-LA-TIONS. SUBJECT NAME [{}] IS NOW ONE YEAR OLDER."
  reminder:
    - "*Beep-boop.* Data has put on Stack. Starting Timer."
    - "Reminder [alpha-five] has been scheduled. Countdown has started."
ttt:
  start_self: "Initializing Tic-Tac-Toe... Game initalized. Analyzing first turn... First turn mine."
  start_other:  "*BEEP.* Initializing Tic-Tac-Toe... Game initalized. Awaiting input from {}."
  gamestate: "DISPLAY STATUS. Awaiting Input from {} against {}:"
  ownmove: "*BEEP, BOOP.* Saving {0} into {1}."
  genericwin: "*Beep-boop.* Statistically spoken, {} has won from {}!"
  win: "*BEEP-BOOP.* VICTORY IS MINE."
  tie: "*Beep, Boop.* Tie achieved. Resetting board."
  loss: "*Beep-boop.* Does not compute! Does not compute!"
  abandon: "*Beep-beep.* The game between {} and {} has been put into the recycling bin. Clearing from memory banks."
  invalid: "**ERROR**. INVALID MOVE."
wheel:
  waiting:
    - "Initializing game. [**ERROR**]: {} not enough entries. Waiting for {} additional data entries."
    - "{}, please wait. Wait. Wait. Wait. Waiting for {} additional players."
  wheelstart: "Initializing game. Loading Participants: {}. Selecting player one: {}. Awaiting input."
  wheelturn:  "Awaiting input from {}."
  badspin:
    - "If Result == {}, current_player = {}."
    - "*BEEP, BOOP,* {}. If this unit could feel, it would be sorry for you. Awaiting input from {}."
  freespin: "*Beep-boop.* Outputting Free Play. Overwriting Rules. Erasing All Penalties."
  goodspin:
    - "*Beep-boop.* Printing: {}! Awaiting guess."
    - "Result == {}."
  badguess: "Counting {}. Total result: ZERO. Awaiting input from {}."
  goodguess: "Counting {1}. Total result: {0}. Awaiting further input."
  wheelwin:
    - "*BEEP-BOOP.* Winner Detected. CON-GRA-TU-LA-TIONS, INSERT PLAYER NAME HERE [ {} ] HAS WON THE GAME. total_earnings equals {}! Shutting Down..."
  wrongsolve: "**ERROR**. No Match Detected. Awaiting input from {}."
  wheelgone: "*Beep-boop.* {} has left the game."
unique:
  error:
    regex: "error"
    response:
      - "**ERROR**, **ERROR**, NO **ERROR**S ALLOWED!"
      - "*Beep-boop*. Error: A fatal exception has occurred. *BEEP-BOOP.*"
